#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

class ConfigTester {
  constructor() {
    this.connectionManager = null;
  }

  async run() {
    console.log(chalk.blue.bold('üîß Teste de Configura√ß√µes MySQL MCP Server\n'));

    try {
      await this.testConfigFile();
      await this.testEnvironmentVariables();
      await this.showConfigurationPriority();
    } catch (error) {
      console.error(chalk.red.bold('‚ùå Erro durante o teste:'), error.message);
      process.exit(1);
    }
  }

  async testConfigFile() {
    console.log(chalk.yellow('üìÅ Testando arquivo de configura√ß√£o...'));

    const configPath = path.join(projectRoot, 'config', 'mysql-connections.json');
    const examplePath = path.join(projectRoot, 'config', 'mysql-connections-example.json');

    if (fs.existsSync(configPath)) {
      console.log(chalk.green(`‚úÖ Arquivo encontrado: ${configPath}`));
      try {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        console.log(chalk.gray(`   Conex√µes: ${Object.keys(config.connections).join(', ')}`));
        console.log(chalk.gray(`   Padr√£o: ${config.defaultConnection}`));
      } catch (error) {
        console.log(chalk.red(`‚ùå Erro ao ler: ${error.message}`));
      }
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${configPath}`));
    }

    if (fs.existsSync(examplePath)) {
      console.log(chalk.green(`‚úÖ Arquivo exemplo encontrado: ${examplePath}`));
      try {
        const config = JSON.parse(fs.readFileSync(examplePath, 'utf8'));
        console.log(chalk.gray(`   Conex√µes: ${Object.keys(config.connections).join(', ')}`));
        console.log(chalk.gray(`   Padr√£o: ${config.defaultConnection}`));
      } catch (error) {
        console.log(chalk.red(`‚ùå Erro ao ler exemplo: ${error.message}`));
      }
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è  Arquivo exemplo n√£o encontrado: ${examplePath}`));
    }

    console.log();
  }

  async testEnvironmentVariables() {
    console.log(chalk.yellow('üåç Testando vari√°veis de ambiente...'));

    const envVars = [
      'MYSQL_HOST',
      'MYSQL_PORT',
      'MYSQL_USER',
      'MYSQL_PASSWORD',
      'MYSQL_DATABASE',
      'MYSQL_CONNECTIONS'
    ];

    for (const envVar of envVars) {
      const value = process.env[envVar];
      if (value) {
        if (envVar === 'MYSQL_CONNECTIONS') {
          console.log(chalk.green(`‚úÖ ${envVar}: Configurada (JSON)`));
          try {
            const config = JSON.parse(value);
            console.log(chalk.gray(`   Conex√µes: ${Object.keys(config.connections).join(', ')}`));
            console.log(chalk.gray(`   Padr√£o: ${config.defaultConnection}`));
          } catch (error) {
            console.log(chalk.red(`   ‚ùå JSON inv√°lido: ${error.message}`));
          }
        } else {
          console.log(chalk.green(`‚úÖ ${envVar}: ${value}`));
        }
      } else {
        console.log(chalk.gray(`‚ö™ ${envVar}: N√£o configurada`));
      }
    }

    console.log();
  }

  async showConfigurationPriority() {
    console.log(chalk.yellow('üìã Prioridade de configura√ß√£o:'));
    console.log(chalk.blue('   1. Arquivo config/mysql-connections.json'));
    console.log(chalk.blue('   2. Vari√°vel de ambiente MYSQL_CONNECTIONS'));
    console.log(chalk.blue('   3. Vari√°veis individuais (MYSQL_HOST, etc.)'));
    console.log(chalk.blue('   4. Valores padr√£o'));

    console.log(chalk.yellow('\nüí° Dicas:'));
    console.log(chalk.gray('   - Use o arquivo JSON para configura√ß√µes permanentes'));
    console.log(chalk.gray('   - Use MYSQL_CONNECTIONS para configura√ß√µes via Cursor/Claude'));
    console.log(chalk.gray('   - Use vari√°veis individuais para configura√ß√µes simples'));
    console.log(chalk.gray('   - Copie mysql-connections-example.json para mysql-connections.json'));

    console.log(chalk.yellow('\nüîß Para usar a conex√£o sigareplica:'));
    console.log(chalk.gray('   1. cp config/mysql-connections-example.json config/mysql-connections.json'));
    console.log(chalk.gray('   2. npm run test-connection'));

    console.log();
  }
}

// Executar teste de configura√ß√£o
const tester = new ConfigTester();
tester.run().catch(console.error);



