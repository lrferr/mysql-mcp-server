#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

// Carregar vari√°veis de ambiente
dotenv.config({ path: path.join(projectRoot, '.env') });

class ConnectionTester {
  constructor() {
    this.connectionManager = null;
  }

  async run() {
    console.log(chalk.blue.bold('üîå Teste de Conex√£o MySQL MCP Server\n'));

    try {
      await this.initializeConnectionManager();
      await this.testAllConnections();
      await this.displayConnectionStatus();
      await this.testSpecificOperations();
    } catch (error) {
      console.error(chalk.red.bold('‚ùå Erro durante o teste:'), error.message);
      process.exit(1);
    }
  }

  async initializeConnectionManager() {
    console.log(chalk.yellow('üîß Inicializando gerenciador de conex√µes...'));

    try {
      const { ConnectionManager } = await import('../src/connection-manager.js');
      this.connectionManager = new ConnectionManager();
      
      // Mostrar informa√ß√µes sobre a origem da configura√ß√£o
      this.displayConfigurationSource();
      
      console.log(chalk.green('‚úÖ Gerenciador de conex√µes inicializado'));
    } catch (error) {
      throw new Error(`Falha ao inicializar gerenciador de conex√µes: ${error.message}`);
    }

    console.log();
  }

  displayConfigurationSource() {
    console.log(chalk.blue('üìã Fonte da configura√ß√£o:'));
    
    // Verificar se existe arquivo de configura√ß√£o
    const configPath = path.join(projectRoot, 'config', 'mysql-connections.json');
    const envPath = path.join(projectRoot, '.env');
    
    if (fs.existsSync(configPath)) {
      console.log(chalk.green(`‚úÖ Arquivo: ${configPath}`));
      try {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        console.log(chalk.gray(`   Conex√µes configuradas: ${Object.keys(config.connections).join(', ')}`));
        console.log(chalk.gray(`   Conex√£o padr√£o: ${config.defaultConnection}`));
      } catch (error) {
        console.log(chalk.red(`‚ùå Erro ao ler arquivo de configura√ß√£o: ${error.message}`));
      }
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${configPath}`));
    }
    
    if (fs.existsSync(envPath)) {
      console.log(chalk.green(`‚úÖ Arquivo: ${envPath}`));
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${envPath}`));
    }
    
    // Verificar vari√°vel de ambiente
    if (process.env.MYSQL_CONNECTIONS) {
      console.log(chalk.green('‚úÖ Configura√ß√£o via vari√°vel de ambiente MYSQL_CONNECTIONS'));
    } else if (process.env.MYSQL_HOST) {
      console.log(chalk.green('‚úÖ Configura√ß√£o via vari√°veis de ambiente individuais'));
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è  Nenhuma configura√ß√£o via vari√°veis de ambiente encontrada'));
    }
    
    console.log();
  }

  async testAllConnections() {
    console.log(chalk.yellow('üîç Testando todas as conex√µes configuradas...'));

    try {
      const results = await this.connectionManager.testAllConnections();
      
      for (const [connectionName, result] of Object.entries(results)) {
        if (result.success) {
          console.log(chalk.green(`‚úÖ ${connectionName}: ${result.message}`));
          if (result.connection) {
            console.log(chalk.gray(`   Host: ${result.connection.host}:${result.connection.port}`));
            console.log(chalk.gray(`   Database: ${result.connection.database}`));
            console.log(chalk.gray(`   User: ${result.connection.user}`));
          }
        } else {
          console.log(chalk.red(`‚ùå ${connectionName}: ${result.message}`));
          if (result.error) {
            console.log(chalk.gray(`   Erro: ${result.error}`));
          }
        }
        console.log();
      }
    } catch (error) {
      console.log(chalk.red('‚ùå Erro ao testar conex√µes:'), error.message);
    }
  }

  async displayConnectionStatus() {
    console.log(chalk.yellow('üìä Status das conex√µes ativas...'));

    try {
      const status = await this.connectionManager.getConnectionsStatus();
      
      for (const [connectionName, connectionStatus] of Object.entries(status)) {
        if (connectionStatus.active) {
          console.log(chalk.green(`‚úÖ ${connectionName}: Ativa`));
          if (connectionStatus.info) {
            console.log(chalk.gray(`   Database: ${connectionStatus.info.current_database}`));
            console.log(chalk.gray(`   User: ${connectionStatus.info.current_user}`));
            console.log(chalk.gray(`   MySQL Version: ${connectionStatus.info.mysql_version}`));
            console.log(chalk.gray(`   Current Time: ${connectionStatus.info.current_time}`));
          }
        } else {
          console.log(chalk.red(`‚ùå ${connectionName}: Inativa`));
          if (connectionStatus.error) {
            console.log(chalk.gray(`   Erro: ${connectionStatus.error}`));
          }
        }
        console.log();
      }
    } catch (error) {
      console.log(chalk.red('‚ùå Erro ao obter status das conex√µes:'), error.message);
    }
  }

  async testSpecificOperations() {
    console.log(chalk.yellow('üß™ Testando opera√ß√µes espec√≠ficas...'));

    try {
      const { MySQLMonitor } = await import('../src/mysql-monitor.js');
      const monitor = new MySQLMonitor(this.connectionManager);

      // Testar health check
      console.log(chalk.blue('üìä Testando health check...'));
      try {
        const healthResult = await monitor.checkDatabaseHealth({
          checkConnections: true,
          checkStorage: true,
          checkPerformance: true
        });
        console.log(chalk.green('‚úÖ Health check executado com sucesso'));
        console.log(chalk.gray('Resultado:'));
        console.log(chalk.gray(healthResult));
      } catch (error) {
        console.log(chalk.red('‚ùå Health check falhou:'), error.message);
      }

      console.log();

      // Testar query segura
      console.log(chalk.blue('üîç Testando query segura...'));
      try {
        const queryResult = await monitor.executeSafeQuery('SELECT 1 + 1 AS solution');
        console.log(chalk.green('‚úÖ Query segura executada com sucesso'));
        console.log(chalk.gray('Resultado:'));
        console.log(chalk.gray(queryResult));
      } catch (error) {
        console.log(chalk.red('‚ùå Query segura falhou:'), error.message);
      }

      console.log();

      // Testar informa√ß√µes do banco
      console.log(chalk.blue('üìã Testando informa√ß√µes do banco...'));
      try {
        const dbInfo = await monitor.getDatabaseInfo({
          includeUsers: false,
          includeDatabases: true
        });
        console.log(chalk.green('‚úÖ Informa√ß√µes do banco obtidas com sucesso'));
        console.log(chalk.gray('Resultado:'));
        console.log(chalk.gray(dbInfo));
      } catch (error) {
        console.log(chalk.red('‚ùå Informa√ß√µes do banco falharam:'), error.message);
      }

    } catch (error) {
      console.log(chalk.red('‚ùå Erro ao testar opera√ß√µes espec√≠ficas:'), error.message);
    }

    console.log();
  }

  async displaySummary() {
    console.log(chalk.green.bold('üéâ Teste de conex√£o conclu√≠do!\n'));

    console.log(chalk.blue.bold('üìã Resumo:'));
    console.log(chalk.blue('   - Conex√µes testadas'));
    console.log(chalk.blue('   - Status verificado'));
    console.log(chalk.blue('   - Opera√ß√µes b√°sicas testadas'));

    console.log(chalk.blue.bold('\nüîß Pr√≥ximos passos:'));
    console.log(chalk.blue('   - Execute "npm start" para iniciar o servidor'));
    console.log(chalk.blue('   - Configure o Cursor IDE usando mcp.json'));
    console.log(chalk.blue('   - Teste as ferramentas dispon√≠veis'));

    console.log(chalk.green.bold('\n‚ú® Pronto para usar o MySQL MCP Server!'));
  }
}

// Executar teste de conex√£o
const tester = new ConnectionTester();
tester.run().catch(console.error);